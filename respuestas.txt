18. Escriba el programa que muestra por la consola la frase "Hola Mundo". ¿Qu ́ significado tiene
la salida? (puts ’Hola Mundo’)

Hola Mundo
 => nil

21.¿Qué diferencia hay entre "\t\n" y ’\t\n’?
	
	Reconoce los comandos, no lo interpreta todo como texto.
 	puts "hola \t\n"
	hola 
	=> nil 
	
	Interpreta todo como texto.
	puts 'hola \t\n'
	hola \t\n
 	=> nil 

22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?

	%q : actúa como sting con comillas simples.

23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?

	%Q : actúa como string con comillas dobles.


24. ¿Qué queda en c?

	irb(main):001:0>
	=> 4
	irb(main):002:0>
	=> 2
	irb(main):003:0>
	irb(main):004:0"
	irb(main):005:0"
	irb(main):006:0"
	a = 4
	b =2
	C= <<HERE
	--#{a}--
	--#{b}--
	HERE
	
LA SALIDA ES: => "--4--\n--2--\n"

Here es un string que lo llenamos y que reconoce las variables.

25. ¿Qué queda en c?

	irb(main):001:0>
	=> 4
	irb(main):002:0>
	=> 2
	irb(main):008:0>
	irb(main):009:0’
	irb(main):010:0’
	irb(main):011:0’
	a = 4
	b =2
	c = <<’HERE’
	--#{a}--
	--#{b}--
	HERE

La salida es:  => "--\#{a}--\n--\#{b}--\n" 

26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?
	
	s[0,2] -> he
	s[-1,1] -> o
	s[0,10] -> hello

27. ¿Qué queda en g?
	
	>> g = "hello"
	=> "hello"
	>> g << " world"
	
	"hello word"

	Lo que hace es concatenar.

28. ¿Qué queda en e?

      >> e = ’.’*3

      "..." 

29. ¿Cuál es el resultado?

      >> a = 1
      => 1
      >> "#{a=a+1} "*3

      "2 2 2 " El resultado me lo pone tres veces.

30. ¿Qué es esto? %w[this is a test]

      Notación para escribir arrays separados por comas y entre comillas dobles.

      ["this", "is", "a", "test"] 

31. ¿Qué es esto? %w[\t \n]

      ["\\t", "\\n"]

32. ¿Qué es esto? %W[\t \n]

      ["\t", "\n"] 

33. ¿Qué contiene nils? nils = Array.new(3)

	Array de 3 posiciones vacias.
	
34. ¿Qué contiene zeros? zeros = Array.new(3, 0)

	[0, 0, 0] 
Array de tres posiciones completo con ceros.

35. ¿Qué queda en b?

	>> x = [[1,2],[3,4]]
	=> [[1, 2], [3, 4]]
	>> b = Array.new(x)
	
Salida: [[1, 2], [3, 4]] 

36. ¿Qué queda en c?

>> c = Array.new(3) { |i| 2*i }

	[0, 2, 4] 

37. ¿Cuál es el resultado de cada una de estas operaciones?

	a = ('a' .. 'e').to_a //Con los dos puntos se sigue la 		secuencia hasta el ultimo valor (e) incluido, con los tres
	puntos no se incluye el ultimo valor.

	 => ["a", "b", "c", "d", "e"] 

	a[1,1]
	 => ["b"]
	 
	a[-2,2]
	 => ["d", "e"] 

	a[0..2]
	 => ["a", "b", "c"]

	a[0...1]
	 => ["a"] 

	a[-2..-1]
	 => ["d", "e"] 



38. ¿Cuál es el resultado de cada una de estas operaciones?

	a[0,2]=%w{A B}  /Cambia los valores del array por A B
	 => ["A", "B"] 

	a
	 => ["A", "B", "c", "d", "e"]

	a[2..5]= %w{C D E}
	 => ["C", "D", "E"] 

	a
	 => ["A", "B", "C", "D", "E"] 

	a[0,0]= [1,2,3]
	 => [1, 2, 3] 

	a
	 => [1, 2, 3, "A", "B", "C", "D", "E"]

	a[0,2]=[]
	 => [] 

	a
	 => [3, "A", "B", "C", "D", "E"]

	a[-1,1] = ['Z']
	 => ["Z"] 

	a
	 => [3, "A", "B", "C", "D", "Z"] 

	a[-2,2] = nil
	 => nil 

	a
	 => [3, "A", "B", "C", nil]

39. ¿Cuál es el resultado de cada una de estas operaciones?

	a=(1...4).to_a
	 => [1, 2, 3] 

	a=a + [4,5]
	 => [1, 2, 3, 4, 5] Concatena

	a += [[6,7,8]]
	 => [1, 2, 3, 4, 5, [6, 7, 8]]

	a=a+9 Esto esta mal, hay que poner los corchetes:
	a=a + [9]
	 => [1, 2, 3, 4, 5, [6, 7, 8], 9]


40. ¿Cuál es el resultado de cada una de estas operaciones?

	x= %w{a b c b a}
	=> ["a", "b", "c", "b", "a"]

	x= x - %w{b c d}
	 => ["a", "a"] 

41. ¿Cuál es el resultado de cada una de estas operaciones?

	z = [0]*8
	[0, 0, 0, 0, 0, 0, 0, 0] 

42. ¿Cuál es el resultado de cada una de estas operaciones?

	a=[]
	 => [] 

	a << 1
	 => [1] 

	a << 2 << 3
	 => [1, 2, 3] 

	a << [4,5,6]
	 => [1, 2, 3, [4, 5, 6]] 

	a.concat [7,8]
	 => [1, 2, 3, [4, 5, 6], 7, 8]

43. ¿Cuál es el resultado de cada una de estas operaciones?

	c= a | b
	=> [1, 2, 3, 4, 5]

	d= b | a
	=> [5, 4, 3, 2, 1]

	e= a & b
	=> [2, 3, 4] 

	f = b & a
	=> [4, 3, 2]

44. ¿Qué resultados dan las siguientes operaciones?

      a.to_a
      => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

      b.to_a
      => [1, 2, 3, 4, 5, 6, 7, 8, 9] 

      b.include? 10
      => false 

      b.include? 8
      => true

      b.step(2) {|x| print "#{x} " }
      1 3 5 7 9  => 1...10

      1..3.to_a
      Da un error. Así seria correcto = (1..3).to_a

45. ¿Qué resultados dan las siguientes operaciones?


      r.member? 50
      => true

      r.include? 99.9
      => true 

      r.member? 99.9
      => true 
      
46. ¿Qué resultados dan las siguientes operaciones?


      true.class
      => TrueClass
      
      false.class
      => FalseClass

      puts "hello" if 0
      hello
      => nil
      
      puts "hello" if nil
      => nil
      
      puts "hello" if ""
      (irb):16: warning: string literal in condition
      hello
      => nil
 
47. ¿Qué resultados dan las siguientes operaciones?

      2.0.0p247 :017 > x= :sym
      => :sym 
      2.0.0p247 :018 > x.class
      => Symbol 
      2.0.0p247 :019 > x == 'sym'
      => false 
      2.0.0p247 :020 > x == :sym
      => true 
      2.0.0p247 :021 > z= :'a long symbol'
      => :"a long symbol" 
      2.0.0p247 :022 > z.class
      => Symbol 
      2.0.0p247 :023 > x== 'sym'.to_sym
      => true 
      2.0.0p247 :024 > x.to_s == 'sym'
      => true
      
48. ¿Qué resultados se dan?

      2.0.0p247 :025 > s="Ruby"
      => "Ruby" 
      2.0.0p247 :026 > t=s
      => "Ruby" 
      2.0.0p247 :027 > t[-1]=""
      => "" 
      2.0.0p247 :028 > print s
      Rub => nil 
      2.0.0p247 :029 > t="Java"
      => "Java" 
      2.0.0p247 :030 > print s, t
      RubJava => nil 

49. ¿Cuál es el resultado?

      "%d %s" % [3,"rubies"]
      => "3 rubies"
 
50. ¿Cuales son los resultados?

      x , y= 4, 5
      => [4, 5]
      
      z= x > y ? x : y
      => 5
      
      x,y,z=[1,2,3]
      => [1, 2, 3]

51. ¿Qué resultados dan las siguientes operaciones?

      x={ :a=> 1, :b=>2}
      => {:a=>1, :b=>2} 
      2.0.0p247 :102 > x.keys
      => [:a, :b] 
      2.0.0p247 :103 > x.values
      => [1, 2] 
      2.0.0p247 :104 > x[:c]=3
      => 3 
      2.0.0p247 :105 > x
      => {:a=>1, :b=>2, :c=>3} 
      2.0.0p247 :106 > x.delete('a')
      => nil 
      2.0.0p247 :107 > x
      => {:a=>1, :b=>2, :c=>3} 
      2.0.0p247 :108 > x.delete(:a)
      => 1 
      2.0.0p247 :109 > x
      => {:b=>2, :c=>3} 
      2.0.0p247 :110 > x={ :a=>1, :b=>2, :c=>4}
      => {:a=>1, :b=>2, :c=>4} 
      2.0.0p247 :111 > x.delete_if{ |k,v| v%2==0}
      => {:a=>1} 
      2.0.0p247 :112 > x
      => {:a=>1} 

52. ¿Qué hace yield 4, 5?

Con yield invocamos a un bloque de datos.
 
 
53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación
counts = {}?

    Con hash.new estamos creando una tabla hash, con un valor asignado en caso de que no exista un valor en la tabla.
    y con {} es otra manera de crear una tabla hash con el valor nil por defecto en caso de que no existe un elemento.

    
54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/

      'hello world, hello LPP'.scan /\w+/
      => ["hello", "world", "hello", "LPP"]
      
      Pone cada palabra de la cadena de texto en un array.
  
  
55. Explique que hacen estas sentencias:

      c.keys.sort.each { |k| puts c[k]}
      3
      2
      1
      => [:a, :b, :c] 
      
      Nos separa cada digito, es decir cada valor de las variables, y luego nos retorna los nombres de las variables.
      

 

